diff --git a/Android.mk b/Android.mk
index a325a18..61625ac 100644
--- a/Android.mk
+++ b/Android.mk
@@ -13,6 +13,8 @@
 # limitations under the License.
 
 LOCAL_PATH:= $(call my-dir)
+
+ifeq (0,1)
 include $(CLEAR_VARS)
 
 #
@@ -34,8 +36,7 @@ LOCAL_EMMA_COVERAGE_FILTER += +com.android.exchange.*
 
 #include $(BUILD_PACKAGE)
 
-include $(CLEAR_VARS)
-
+endif
 
 ##################################################
 # Build all sub-directories
diff --git a/exchange2/AndroidManifest.xml b/exchange2/AndroidManifest.xml
index 7537b73..140c96f 100644
--- a/exchange2/AndroidManifest.xml
+++ b/exchange2/AndroidManifest.xml
@@ -64,6 +64,9 @@
     <uses-permission
         android:name="com.android.email.permission.ACCESS_PROVIDER"/>
 
+    <!-- Required for sending images from Gallery -->
+    <uses-permission android:name="com.google.android.gallery3d.permission.GALLERY_PROVIDER" />
+
     <application
         android:icon="@mipmap/icon"
         android:label="@string/app_name"
@@ -147,6 +150,7 @@
             android:authorities="com.android.exchange.directory.provider"
             android:readPermission="android.permission.READ_CONTACTS"
             android:multiprocess="false"
+            android:exported="true"
             >
           <meta-data
               android:name="android.content.ContactDirectory"
diff --git a/exchange2/res/values-en-rGB/strings.xml b/exchange2/res/values-en-rGB/strings.xml
index 069e0be..a4725d9 100644
--- a/exchange2/res/values-en-rGB/strings.xml
+++ b/exchange2/res/values-en-rGB/strings.xml
@@ -56,7 +56,7 @@
     <string name="account_setup_options_mail_window_auto" msgid="4188895354366183790">"Automatic"</string>
     <string name="account_setup_options_mail_window_1day" msgid="3965715241135811407">"One day"</string>
     <string name="account_setup_options_mail_window_3days" msgid="736181102295878114">"Three days"</string>
-    <string name="account_setup_options_mail_window_1week" msgid="5639718031108023741">"one week"</string>
+    <string name="account_setup_options_mail_window_1week" msgid="5639718031108023741">"One week"</string>
     <string name="account_setup_options_mail_window_2weeks" msgid="4567049268124213035">"Two weeks"</string>
     <string name="account_setup_options_mail_window_1month" msgid="5846359669750047081">"One month"</string>
     <string name="account_setup_options_mail_window_all" msgid="5372861827683632364">"All"</string>
diff --git a/exchange2/res/values-fa/strings.xml b/exchange2/res/values-fa/strings.xml
index 13559bb..9edb1bc 100644
--- a/exchange2/res/values-fa/strings.xml
+++ b/exchange2/res/values-fa/strings.xml
@@ -21,16 +21,16 @@
     <string name="meeting_declined" msgid="6707617183246608552">"پذیرفته نشد: <xliff:g id="SUBJECT">%s</xliff:g>"</string>
     <string name="meeting_tentative" msgid="8250995722130443785">"احتمالی: <xliff:g id="SUBJECT">%s</xliff:g>"</string>
     <string name="meeting_canceled" msgid="3949893881872084244">"لغو شد: <xliff:g id="SUBJECT">%s</xliff:g>"</string>
-    <string name="meeting_updated" msgid="8529675857361702860">"به روزرسانی شد: <xliff:g id="SUBJECT">%s</xliff:g>"</string>
+    <string name="meeting_updated" msgid="8529675857361702860">"به‌روزرسانی شد: <xliff:g id="SUBJECT">%s</xliff:g>"</string>
     <string name="meeting_when" msgid="2765696159697448656">"زمان: <xliff:g id="WHEN">%s</xliff:g>"</string>
     <string name="meeting_where" msgid="5992367535856553079">"مکان: <xliff:g id="WHERE">%s</xliff:g>"</string>
     <string name="meeting_recurring" msgid="3134262212606714023">"زمان: <xliff:g id="EVENTDATE">%s</xliff:g> (تکرار)"</string>
     <string name="meeting_allday" msgid="6696389765484663513">"زمان: <xliff:g id="EVENTDATE">%s</xliff:g> (در تمام طول روز)"</string>
-    <string name="meeting_allday_recurring" msgid="2320264182781062684">"زمان: <xliff:g id="EVENTDATE">%s</xliff:g> (در تمام طول روز، بصورت تکراری)"</string>
+    <string name="meeting_allday_recurring" msgid="2320264182781062684">"زمان: <xliff:g id="EVENTDATE">%s</xliff:g> (در تمام طول روز، به‌صورت تکراری)"</string>
     <string name="notification_exchange_calendar_added" msgid="6823659622379350159">"تقویم Exchange اضافه شد"</string>
-    <string name="app_name" msgid="5316597712787122829">"سرویس های Exchange"</string>
+    <string name="app_name" msgid="5316597712787122829">"سرویس‌های Exchange"</string>
     <string name="exception_cancel" msgid="6160117429428313805">"این رویداد لغو شده است به مدت: <xliff:g id="DATE">%s</xliff:g>"</string>
-    <string name="exception_updated" msgid="3397583105901142050">"جزئیات این رویداد تغییر کرده اند به مدت: <xliff:g id="DATE">%s</xliff:g>"</string>
+    <string name="exception_updated" msgid="3397583105901142050">"جزئیات این رویداد تغییر کرده‌اند به مدت: <xliff:g id="DATE">%s</xliff:g>"</string>
     <string name="policy_dont_allow_storage_cards" msgid="2765447013574188473">"کارت‌های حافظه مجاز نیست"</string>
     <string name="policy_dont_allow_unsigned_apps" msgid="4896164334956001479">"برنامه‌های امضا نشده مجاز نیستند"</string>
     <string name="policy_dont_allow_unsigned_installers" msgid="1326544905185523540">"نصب کننده‌های برنامه امضا نشده مجاز نیستند"</string>
@@ -42,7 +42,7 @@
     <string name="policy_dont_allow_browser" msgid="1018764395507493616">"مرورگرها مجاز نیستند"</string>
     <string name="policy_dont_allow_consumer_email" msgid="6958427300686692292">"ایمیل مصرف‌کننده مجاز نیست"</string>
     <string name="policy_dont_allow_internet_sharing" msgid="2370083814654927695">"اشتراک‌گذاری اینترنتی مجاز نیست"</string>
-    <string name="policy_require_smime" msgid="673557150920820590">"پیامهای SMIME لازم است"</string>
+    <string name="policy_require_smime" msgid="673557150920820590">"پیام‌های SMIME لازم است"</string>
     <string name="policy_bluetooth_restricted" msgid="5248824127186039567">"استفاده از بلوتوث محدود است"</string>
     <string name="policy_app_blacklist" msgid="8169194058285873461">"برنامه‌های خاص مجاز نیستند"</string>
     <string name="policy_app_whitelist" msgid="3670572644342165306">"فقط برنامه‌های خاص مجاز هستند"</string>
diff --git a/exchange2/src/com/android/exchange/EasAccountService.java b/exchange2/src/com/android/exchange/EasAccountService.java
index 58ddaf3..863e0d6 100644
--- a/exchange2/src/com/android/exchange/EasAccountService.java
+++ b/exchange2/src/com/android/exchange/EasAccountService.java
@@ -310,7 +310,15 @@ public class EasAccountService extends EasSyncService {
 
             while (!isStopped()) {
                 // If we're not allowed to sync (e.g. roaming policy), leave now
-                if (!ExchangeService.canAutoSync(mAccount)) return;
+                if (!ExchangeService.canAutoSync(mAccount)) {
+                    if (ExchangeService.onSecurityHold(mAccount)) {
+                        mExitStatus = EasSyncService.EXIT_SECURITY_FAILURE;
+                    } else {
+                        // Use backoff rules, etc.
+                        mExitStatus = EasSyncService.EXIT_IO_ERROR;
+                    }
+                    return;
+                }
                 userLog("Sending Account syncKey: ", mAccount.mSyncKey);
                 Serializer s = new Serializer();
                 s.start(Tags.FOLDER_FOLDER_SYNC).start(Tags.FOLDER_SYNC_KEY)
@@ -679,8 +687,6 @@ public class EasAccountService extends EasSyncService {
                         }
 
                         if (code == HttpStatus.SC_OK) {
-                            // Make sure to clear out any pending sync errors
-                            ExchangeService.removeFromSyncErrorMap(mMailboxId);
                             if (!resp.isEmpty()) {
                                 InputStream is = resp.getInputStream();
                                 int pingResult = parsePingResult(is, mContentResolver,
@@ -708,6 +714,8 @@ public class EasAccountService extends EasSyncService {
                                     // Act as if we have an IOException (backoff, etc.)
                                     throw new IOException();
                                 }
+                                // Make sure to clear out any pending sync errors
+                                ExchangeService.removeFromSyncErrorMap(mMailboxId);
                             } else {
                                 userLog("Ping returned empty result; throwing IOException");
                                 throw new IOException();
diff --git a/exchange2/src/com/android/exchange/EasSyncService.java b/exchange2/src/com/android/exchange/EasSyncService.java
index 657bc84..d0360bc 100644
--- a/exchange2/src/com/android/exchange/EasSyncService.java
+++ b/exchange2/src/com/android/exchange/EasSyncService.java
@@ -1747,6 +1747,8 @@ public class EasSyncService extends AbstractSyncService {
                     }
 
                     if (emptyStream) {
+                        // Make sure we get rid of updates/deletes
+                        target.cleanup();
                         // If this happens, exit cleanly, and change the interval from push to ping
                         // if necessary
                         userLog("Empty sync response; finishing");
diff --git a/exchange2/src/com/android/exchange/ExchangeService.java b/exchange2/src/com/android/exchange/ExchangeService.java
index b1ae3b7..0310008 100644
--- a/exchange2/src/com/android/exchange/ExchangeService.java
+++ b/exchange2/src/com/android/exchange/ExchangeService.java
@@ -642,7 +642,7 @@ public class ExchangeService extends Service implements Runnable {
         }
     }
 
-    private boolean onSecurityHold(Account account) {
+    static boolean onSecurityHold(Account account) {
         return (account.mFlags & Account.FLAGS_SECURITY_HOLD) != 0;
     }
 
@@ -690,7 +690,7 @@ public class ExchangeService extends Service implements Runnable {
                                     PolicyServiceProxy.setAccountHoldFlag(ExchangeService.this,
                                             account, false);
                                     log("isActive true; release hold for " + account.mDisplayName);
-                                }
+				}
                             }
                         }
                     }
@@ -1115,10 +1115,10 @@ public class ExchangeService extends Service implements Runnable {
         }
 
         /**
-         * We double the holdDelay from 15 seconds through 4 mins
+         * We double the holdDelay from 15 seconds through 8 mins
          */
         void escalate() {
-            if (holdDelay < HOLD_DELAY_MAXIMUM) {
+            if (holdDelay <= HOLD_DELAY_MAXIMUM) {
                 holdDelay *= 2;
             }
             holdEndTime = System.currentTimeMillis() + holdDelay;
@@ -2162,7 +2162,11 @@ public class ExchangeService extends Service implements Runnable {
             if (policy == null) {
                 policy = Policy.restorePolicyWithId(INSTANCE, policyKey);
                 account.mPolicy = policy;
-                if (!PolicyServiceProxy.isActive(exchangeService, policy)) return false;
+                if (!PolicyServiceProxy.isActive(exchangeService, policy)) {
+                    PolicyServiceProxy.setAccountHoldFlag(exchangeService, account, true);
+                    log("canAutoSync; policies not active, set hold flag");
+                    return false;
+                }
             }
             if (policy != null && policy.mRequireManualSyncWhenRoaming && networkInfo.isRoaming()) {
                 return false;
@@ -2280,7 +2284,7 @@ public class ExchangeService extends Service implements Runnable {
         if (c == null) throw new ProviderUnavailableException();
         try {
             while (c.moveToNext()) {
-                long mailboxId = c.getLong(Mailbox.CONTENT_ID_COLUMN);
+                final long mailboxId = c.getLong(Mailbox.CONTENT_ID_COLUMN);
                 AbstractSyncService service = null;
                 synchronized (sSyncLock) {
                     service = mServiceMap.get(mailboxId);
@@ -2290,12 +2294,6 @@ public class ExchangeService extends Service implements Runnable {
                     Account account = getAccountById(c.getInt(Mailbox.CONTENT_ACCOUNT_KEY_COLUMN));
                     if (account == null) continue;
 
-                    // We handle a few types of mailboxes specially
-                    int mailboxType = c.getInt(Mailbox.CONTENT_TYPE_COLUMN);
-                    if (!isMailboxSyncable(account, mailboxType)) {
-                        continue;
-                    }
-
                     // Check whether we're in a hold (temporary or permanent)
                     SyncError syncError = mSyncErrorMap.get(mailboxId);
                     if (syncError != null) {
@@ -2315,6 +2313,18 @@ public class ExchangeService extends Service implements Runnable {
                         }
                     }
 
+                    // We handle a few types of mailboxes specially
+                    final int mailboxType = c.getInt(Mailbox.CONTENT_TYPE_COLUMN);
+                    if (!isMailboxSyncable(account, mailboxType)) {
+                        // If there isn't an entry in the sync error map, in case of a security
+                        // hold, add one to allow the next sync to be deferred
+                        if (syncError == null && onSecurityHold(account)) {
+                            mSyncErrorMap.put(mailboxId,
+                                    new SyncError(AbstractSyncService.EXIT_SECURITY_FAILURE, true));
+                        }
+                        continue;
+                    }
+
                     // Otherwise, we use the sync interval
                     long syncInterval = c.getInt(Mailbox.CONTENT_SYNC_INTERVAL_COLUMN);
                     if (syncInterval == Mailbox.CHECK_INTERVAL_PUSH) {
@@ -2628,6 +2638,7 @@ public class ExchangeService extends Service implements Runnable {
                         if (syncError != null) {
                             syncError.escalate();
                             log(m.mDisplayName + " held for " + syncError.holdDelay + "ms");
+                            return;
                         } else {
                             log(m.mDisplayName + " added to syncErrorMap, hold for 15s");
                         }
diff --git a/exchange2/src/com/android/exchange/adapter/CalendarSyncAdapter.java b/exchange2/src/com/android/exchange/adapter/CalendarSyncAdapter.java
index c21be00..45e8372 100644
--- a/exchange2/src/com/android/exchange/adapter/CalendarSyncAdapter.java
+++ b/exchange2/src/com/android/exchange/adapter/CalendarSyncAdapter.java
@@ -43,8 +43,8 @@ import android.provider.SyncStateContract;
 import android.text.TextUtils;
 import android.util.Log;
 
-import com.android.calendarcommon.DateException;
-import com.android.calendarcommon.Duration;
+import com.android.calendarcommon2.DateException;
+import com.android.calendarcommon2.Duration;
 import com.android.emailcommon.AccountManagerTypes;
 import com.android.emailcommon.provider.EmailContent;
 import com.android.emailcommon.provider.EmailContent.Message;
@@ -605,6 +605,9 @@ public class CalendarSyncAdapter extends AbstractSyncAdapter {
             // Enforce CalendarProvider required properties
             setTimeRelatedValues(cv, startTime, endTime, allDayEvent);
 
+            // Set user's availability
+            cv.put(Events.AVAILABILITY, CalendarUtilities.availabilityFromBusyStatus(busyStatus));
+
             // If we haven't added the organizer to attendees, do it now
             if (!organizerAdded) {
                 addOrganizerToAttendees(ops, eventId, organizerName, organizerEmail);
@@ -1712,27 +1715,16 @@ public class CalendarSyncAdapter extends AbstractSyncAdapter {
                 s.end();  // Attendees
             }
 
-            // Get busy status from Attendees table
-            long eventId = entityValues.getAsLong(Events._ID);
-            int busyStatus = CalendarUtilities.BUSY_STATUS_TENTATIVE;
-            Cursor c = mService.mContentResolver.query(
-                    asSyncAdapter(Attendees.CONTENT_URI, mEmailAddress,
-                            Eas.EXCHANGE_ACCOUNT_MANAGER_TYPE),
-                    ATTENDEE_STATUS_PROJECTION, EVENT_AND_EMAIL,
-                    new String[] {Long.toString(eventId), mEmailAddress}, null);
-            if (c != null) {
-                try {
-                    if (c.moveToFirst()) {
-                        busyStatus = CalendarUtilities.busyStatusFromAttendeeStatus(
-                                c.getInt(ATTENDEE_STATUS_COLUMN_STATUS));
-                    }
-                } finally {
-                    c.close();
-                }
-            }
+            // Get busy status from availability
+            int availability = entityValues.getAsInteger(Events.AVAILABILITY);
+            int busyStatus = CalendarUtilities.busyStatusFromAvailability(availability);
             s.data(Tags.CALENDAR_BUSY_STATUS, Integer.toString(busyStatus));
 
             // Meeting status, 0 = appointment, 1 = meeting, 3 = attendee
+            // In JB, organizer won't be an attendee
+            if (organizerEmail == null && entityValues.containsKey(Events.ORGANIZER)) {
+                organizerEmail = entityValues.getAsString(Events.ORGANIZER);
+            }
             if (mEmailAddress.equalsIgnoreCase(organizerEmail)) {
                 s.data(Tags.CALENDAR_MEETING_STATUS, hasAttendees ? "1" : "0");
             } else {
diff --git a/exchange2/src/com/android/exchange/adapter/EmailSyncAdapter.java b/exchange2/src/com/android/exchange/adapter/EmailSyncAdapter.java
index 87c96cb..d795475 100644
--- a/exchange2/src/com/android/exchange/adapter/EmailSyncAdapter.java
+++ b/exchange2/src/com/android/exchange/adapter/EmailSyncAdapter.java
@@ -25,6 +25,7 @@ import android.content.OperationApplicationException;
 import android.database.Cursor;
 import android.net.Uri;
 import android.os.RemoteException;
+import android.os.TransactionTooLargeException;
 import android.provider.CalendarContract.Events;
 import android.text.Html;
 import android.text.SpannedString;
@@ -75,6 +76,7 @@ import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.GregorianCalendar;
+import java.util.List;
 import java.util.TimeZone;
 
 /**
@@ -109,6 +111,8 @@ public class EmailSyncAdapter extends AbstractSyncAdapter {
 
     private static final String EMAIL_WINDOW_SIZE = "5";
 
+    private static final int MAX_NUM_FETCH_SIZE_REDUCTIONS = 5;
+
     @VisibleForTesting
     static final int LAST_VERB_REPLY = 1;
     @VisibleForTesting
@@ -1112,9 +1116,24 @@ public class EmailSyncAdapter extends AbstractSyncAdapter {
 
         @Override
         public void commit() {
-            // Use a batch operation to handle the changes
-            ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();
+            commitImpl(0);
+        }
 
+        public void commitImpl(final int tryCount) {
+            // Use a batch operation to handle the changes
+            final ArrayList<ContentProviderOperation> ops =
+                    new ArrayList<ContentProviderOperation>();
+
+            // Maximum size of message text per fetch
+            int numFetched = fetchedEmails.size();
+            int maxPerFetch = 0;
+            if (numFetched > 0 && tryCount > 0) {
+                // Educated guess that 450000 chars (900k) is ok; 600k is a killer
+                // Remember that when fetching, we're not getting any other data
+                // We'll keep trying, reducing the maximum each time
+                // Realistically, this will rarely exceed 1, and probably never 2
+                maxPerFetch = 450000 / numFetched / tryCount;
+            }
             for (Message msg: fetchedEmails) {
                 // Find the original message's id (by serverId and mailbox)
                 Cursor c = getServerIdCursor(msg.mServerId, EmailContent.ID_PROJECTION);
@@ -1137,12 +1156,25 @@ public class EmailSyncAdapter extends AbstractSyncAdapter {
                 // If we find one, we do two things atomically: 1) set the body text for the
                 // message, and 2) mark the message loaded (i.e. completely loaded)
                 if (id != null) {
-                    userLog("Fetched body successfully for ", id);
                     mBindArgument[0] = id;
+                    if (msg.mText != null && (maxPerFetch > 0) &&
+                            (msg.mText.length() > maxPerFetch)) {
+                        userLog("Truncating TEXT to " + maxPerFetch);
+                        msg.mText = msg.mText.substring(0, maxPerFetch) + "...";
+                    }
+                    if (msg.mHtml != null && (maxPerFetch > 0) &&
+                            (msg.mHtml.length() > maxPerFetch)) {
+                        userLog("Truncating HTML to " + maxPerFetch);
+                        msg.mHtml = msg.mHtml.substring(0, maxPerFetch) + "...";
+                    }
                     ops.add(ContentProviderOperation.newUpdate(Body.CONTENT_URI)
                             .withSelection(Body.MESSAGE_KEY + "=?", mBindArgument)
                             .withValue(Body.TEXT_CONTENT, msg.mText)
                             .build());
+                    ops.add(ContentProviderOperation.newUpdate(Body.CONTENT_URI)
+                            .withSelection(Body.MESSAGE_KEY + "=?", mBindArgument)
+                            .withValue(Body.HTML_CONTENT, msg.mHtml)
+                            .build());
                     ops.add(ContentProviderOperation.newUpdate(Message.CONTENT_URI)
                             .withSelection(EmailContent.RECORD_ID + "=?", mBindArgument)
                             .withValue(Message.FLAG_LOADED, Message.FLAG_LOADED_COMPLETE)
@@ -1163,7 +1195,7 @@ public class EmailSyncAdapter extends AbstractSyncAdapter {
             if (!changedEmails.isEmpty()) {
                 // Server wins in a conflict...
                 for (ServerChange change : changedEmails) {
-                     ContentValues cv = new ContentValues();
+                    ContentValues cv = new ContentValues();
                     if (change.read != null) {
                         cv.put(MessageColumns.FLAG_READ, change.read);
                     }
@@ -1175,8 +1207,8 @@ public class EmailSyncAdapter extends AbstractSyncAdapter {
                     }
                     ops.add(ContentProviderOperation.newUpdate(
                             ContentUris.withAppendedId(Message.CONTENT_URI, change.id))
-                                .withValues(cv)
-                                .build());
+                            .withValues(cv)
+                            .build());
                 }
             }
 
@@ -1185,7 +1217,7 @@ public class EmailSyncAdapter extends AbstractSyncAdapter {
             mailboxValues.put(Mailbox.SYNC_KEY, mMailbox.mSyncKey);
             ops.add(ContentProviderOperation.newUpdate(
                     ContentUris.withAppendedId(Mailbox.CONTENT_URI, mMailbox.mId))
-                        .withValues(mailboxValues).build());
+                    .withValues(mailboxValues).build());
 
             // No commits if we're stopped
             synchronized (mService.getSynchronizer()) {
@@ -1193,6 +1225,18 @@ public class EmailSyncAdapter extends AbstractSyncAdapter {
                 try {
                     mContentResolver.applyBatch(EmailContent.AUTHORITY, ops);
                     userLog(mMailbox.mDisplayName, " SyncKey saved as: ", mMailbox.mSyncKey);
+                } catch (TransactionTooLargeException e) {
+                    Log.w(TAG, "Transaction failed on fetched message; retrying...");
+
+                    if (tryCount <= MAX_NUM_FETCH_SIZE_REDUCTIONS || ops.size() == 1) {
+                        // We haven't tried reducing the message body size enough yet. Try this
+                        // commit again.
+                        commitImpl(tryCount + 1);
+                    } else {
+                        // We have tried too many time to with just reducing the fetch size.
+                        // Try applying the batch operations in smaller chunks
+                        applyBatchOperations(ops);
+                    }
                 } catch (RemoteException e) {
                     // There is nothing to be done here; fail by returning null
                 } catch (OperationApplicationException e) {
@@ -1202,6 +1246,57 @@ public class EmailSyncAdapter extends AbstractSyncAdapter {
         }
     }
 
+    private void applyBatchOperations(List<ContentProviderOperation> operations) {
+        // Assume that since this method is being called, we want to break this batch up in chunks
+        // First assume that we want to take the list and do it in two chunks
+        int numberOfBatches = 2;
+
+        // Make a copy of the operation list
+        final List<ContentProviderOperation> remainingOperations = new ArrayList(operations);
+
+        // determin the batch size
+        int batchSize = remainingOperations.size() / numberOfBatches;
+        try {
+            while (remainingOperations.size() > 0) {
+                // Ensure that batch size is smaller than the list size
+                if (batchSize > remainingOperations.size()) {
+                    batchSize = remainingOperations.size();
+                }
+
+                final List<ContentProviderOperation> workingBatch;
+                // If the batch size and the list size is the same, just use the whole list
+                if (batchSize == remainingOperations.size()) {
+                    workingBatch = remainingOperations;
+                } else {
+                    // Get the sublist of of the remaining batch that contains only the batch size
+                    workingBatch = remainingOperations.subList(0, batchSize - 1);
+                }
+
+                try {
+                    // This is a waste, but ContentResolver#applyBatch requies an ArrayList, but
+                    // List#subList retuns only a List
+                    final ArrayList<ContentProviderOperation> batch = new ArrayList(workingBatch);
+                    mContentResolver.applyBatch(EmailContent.AUTHORITY, batch);
+
+                    // We successfully applied that batch.  Remove it from the remaining work
+                    workingBatch.clear();
+                } catch (TransactionTooLargeException e) {
+                    if (batchSize == 1) {
+                        Log.w(TAG, "Transaction failed applying batch. smallest possible batch.");
+                        throw e;
+                    }
+                    Log.w(TAG, "Transaction failed applying batch. trying smaller size...");
+                    numberOfBatches++;
+                    batchSize = remainingOperations.size() / numberOfBatches;
+                }
+            }
+        } catch (RemoteException e) {
+            // There is nothing to be done here; fail by returning null
+        } catch (OperationApplicationException e) {
+            // There is nothing to be done here; fail by returning null
+        }
+    }
+
     @Override
     public String getCollectionName() {
         return "Email";
diff --git a/exchange2/src/com/android/exchange/adapter/FolderSyncParser.java b/exchange2/src/com/android/exchange/adapter/FolderSyncParser.java
index 2c213a4..411c0f9 100644
--- a/exchange2/src/com/android/exchange/adapter/FolderSyncParser.java
+++ b/exchange2/src/com/android/exchange/adapter/FolderSyncParser.java
@@ -188,8 +188,13 @@ public class FolderSyncParser extends AbstractSyncParser {
                     }
                 }
             } else if (tag == Tags.FOLDER_SYNC_KEY) {
-                mAccount.mSyncKey = getValue();
-                userLog("New Account SyncKey: ", mAccount.mSyncKey);
+                String newKey = getValue();
+                if (!resetFolders) {
+                    mAccount.mSyncKey = newKey;
+                    userLog("New syncKey: ", newKey);
+                } else {
+                    userLog("Ignoring new syncKey: ", newKey);
+                }
             } else if (tag == Tags.FOLDER_CHANGES) {
                 if (mStatusOnly) return res;
                 changesParser(mOperations, mInitialSync);
diff --git a/exchange2/src/com/android/exchange/adapter/Search.java b/exchange2/src/com/android/exchange/adapter/Search.java
index 62cda19..dfe835a 100644
--- a/exchange2/src/com/android/exchange/adapter/Search.java
+++ b/exchange2/src/com/android/exchange/adapter/Search.java
@@ -75,7 +75,7 @@ public class Search {
         ContentValues statusValues = new ContentValues();
         try {
             // Set the status of this mailbox to indicate query
-            statusValues.put(Mailbox.UI_SYNC_STATUS, UIProvider.SyncStatus.USER_QUERY);
+            statusValues.put(Mailbox.UI_SYNC_STATUS, UIProvider.SyncStatus.LIVE_QUERY);
             searchMailbox.update(context, statusValues);
 
             svc.mMailbox = searchMailbox;
diff --git a/exchange2/src/com/android/exchange/provider/ExchangeDirectoryProvider.java b/exchange2/src/com/android/exchange/provider/ExchangeDirectoryProvider.java
index 6d725ff..5843c46 100644
--- a/exchange2/src/com/android/exchange/provider/ExchangeDirectoryProvider.java
+++ b/exchange2/src/com/android/exchange/provider/ExchangeDirectoryProvider.java
@@ -330,8 +330,8 @@ public class ExchangeDirectoryProvider extends ContentProvider {
                         displayName, displayName, Phone.TYPE_WORK, ps.get(GalData.WORK_PHONE));
                 GalContactRow.addPhoneRow(cursor, galProjection, contactId, accountName,
                         displayName, displayName, Phone.TYPE_MOBILE, ps.get(GalData.MOBILE_PHONE));
-                GalContactRow.addNameRow(cursor, galProjection, contactId, accountName, displayName,
-                        ps.get(GalData.FIRST_NAME), ps.get(GalData.LAST_NAME), displayName);
+                GalContactRow.addNameRow(cursor, galProjection, contactId, displayName, accountName,
+                        displayName, ps.get(GalData.FIRST_NAME), ps.get(GalData.LAST_NAME));
                 return cursor;
             }
         }
diff --git a/exchange2/src/com/android/exchange/utility/CalendarUtilities.java b/exchange2/src/com/android/exchange/utility/CalendarUtilities.java
index 792d065..2872e80 100644
--- a/exchange2/src/com/android/exchange/utility/CalendarUtilities.java
+++ b/exchange2/src/com/android/exchange/utility/CalendarUtilities.java
@@ -35,8 +35,8 @@ import android.text.format.Time;
 import android.util.Base64;
 import android.util.Log;
 
-import com.android.calendarcommon.DateException;
-import com.android.calendarcommon.Duration;
+import com.android.calendarcommon2.DateException;
+import com.android.calendarcommon2.Duration;
 import com.android.emailcommon.Logging;
 import com.android.emailcommon.mail.Address;
 import com.android.emailcommon.provider.Account;
@@ -107,17 +107,19 @@ public class CalendarUtilities {
 
     // The following constants relate to Microsoft's TIME_ZONE_INFORMATION structure
     // For documentation, see http://msdn.microsoft.com/en-us/library/ms725481(VS.85).aspx
+    static final int MSFT_TIME_ZONE_STRING_SIZE = 32;
+
     static final int MSFT_TIME_ZONE_BIAS_OFFSET = 0;
     static final int MSFT_TIME_ZONE_STANDARD_NAME_OFFSET =
         MSFT_TIME_ZONE_BIAS_OFFSET + MSFT_LONG_SIZE;
     static final int MSFT_TIME_ZONE_STANDARD_DATE_OFFSET =
-        MSFT_TIME_ZONE_STANDARD_NAME_OFFSET + (MSFT_WCHAR_SIZE*32);
+        MSFT_TIME_ZONE_STANDARD_NAME_OFFSET + (MSFT_WCHAR_SIZE*MSFT_TIME_ZONE_STRING_SIZE);
     static final int MSFT_TIME_ZONE_STANDARD_BIAS_OFFSET =
         MSFT_TIME_ZONE_STANDARD_DATE_OFFSET + MSFT_SYSTEMTIME_SIZE;
     static final int MSFT_TIME_ZONE_DAYLIGHT_NAME_OFFSET =
         MSFT_TIME_ZONE_STANDARD_BIAS_OFFSET + MSFT_LONG_SIZE;
     static final int MSFT_TIME_ZONE_DAYLIGHT_DATE_OFFSET =
-        MSFT_TIME_ZONE_DAYLIGHT_NAME_OFFSET + (MSFT_WCHAR_SIZE*32);
+        MSFT_TIME_ZONE_DAYLIGHT_NAME_OFFSET + (MSFT_WCHAR_SIZE*MSFT_TIME_ZONE_STRING_SIZE);
     static final int MSFT_TIME_ZONE_DAYLIGHT_BIAS_OFFSET =
         MSFT_TIME_ZONE_DAYLIGHT_DATE_OFFSET + MSFT_SYSTEMTIME_SIZE;
     static final int MSFT_TIME_ZONE_SIZE =
@@ -216,6 +218,19 @@ public class CalendarUtilities {
         bytes[offset] = (byte) ((value >> 8) & 0xFF);
     }
 
+    static String getString(byte[] bytes, int offset, int size) {
+        StringBuilder sb = new StringBuilder();
+        for (int i = 0; i < size; i++) {
+            int ch = bytes[offset + i];
+            if (ch == 0) {
+                break;
+            } else {
+                sb.append((char)ch);
+            }
+        }
+        return sb.toString();
+    }
+
     // Internal structure for storing a time zone date from a SYSTEMTIME structure
     // This date represents either the start or the end time for DST
     static class TimeZoneDate {
@@ -861,19 +876,34 @@ public class CalendarUtilities {
                     if (dstSavings != timeZone.getDSTSavings()) continue;
                     return timeZone;
                 }
-                // In this case, there is no daylight savings time, so the only interesting data
-                // is the offset, and we know that all of the zoneId's match; we'll take the first
                 boolean lenient = false;
+                boolean name = false;
                 if ((dstStart.hour != dstEnd.hour) && (precision == STANDARD_DST_PRECISION)) {
                     timeZone = tziStringToTimeZoneImpl(timeZoneString, LENIENT_DST_PRECISION);
                     lenient = true;
                 } else {
-                    timeZone = TimeZone.getTimeZone(zoneIds[0]);
+                    // We can't find a time zone match, so our last attempt is to see if there's
+                    // a valid time zone name in the TZI; if not we'll just take the first TZ with
+                    // a matching offset (which is likely wrong, but ... what else is there to do)
+                    String tzName = getString(timeZoneBytes, MSFT_TIME_ZONE_STANDARD_NAME_OFFSET,
+                            MSFT_TIME_ZONE_STRING_SIZE);
+                    if (!tzName.isEmpty()) {
+                        TimeZone tz = TimeZone.getTimeZone(tzName);
+                        if (tz != null) {
+                            timeZone = tz;
+                            name = true;
+                        } else {
+                            timeZone = TimeZone.getTimeZone(zoneIds[0]);
+                        }
+                    } else {
+                        timeZone = TimeZone.getTimeZone(zoneIds[0]);
+                    }
                 }
                 if (Eas.USER_LOG) {
                     ExchangeService.log(TAG,
                             "No TimeZone with correct DST settings; using " +
-                            (lenient ? "lenient" : "first") + ": " + timeZone.getID());
+                            (name ? "name" : (lenient ? "lenient" : "first")) + ": " +
+                                    timeZone.getID());
                 }
                 return timeZone;
             }
@@ -1507,6 +1537,50 @@ public class CalendarUtilities {
         return busyStatus;
     }
 
+    /** Get a busy status from event availability
+     * The default here is TENTATIVE
+     * @param availability from CalendarProvider2
+     * @return the corresponding value of busy status
+     */
+    static public int busyStatusFromAvailability(int availability) {
+        int busyStatus;
+        switch (availability) {
+            case Events.AVAILABILITY_BUSY:
+                busyStatus = BUSY_STATUS_BUSY;
+                break;
+            case Events.AVAILABILITY_FREE:
+                busyStatus = BUSY_STATUS_FREE;
+                break;
+            case Events.AVAILABILITY_TENTATIVE:
+            default:
+                busyStatus = BUSY_STATUS_TENTATIVE;
+                break;
+        }
+        return busyStatus;
+    }
+
+    /** Get an event availability from busy status
+     * The default here is TENTATIVE
+     * @param busyStatus from CalendarProvider2
+     * @return the corresponding availability value
+     */
+    static public int availabilityFromBusyStatus(int busyStatus) {
+        int availability;
+        switch (busyStatus) {
+            case BUSY_STATUS_BUSY:
+                availability = Events.AVAILABILITY_BUSY;
+                break;
+            case BUSY_STATUS_FREE:
+                availability = Events.AVAILABILITY_FREE;
+                break;
+            case BUSY_STATUS_TENTATIVE:
+            default:
+                availability = Events.AVAILABILITY_TENTATIVE;
+                break;
+        }
+        return availability;
+    }
+
     static public String buildMessageTextFromEntityValues(Context context,
             ContentValues entityValues, StringBuilder sb) {
         if (sb == null) {
diff --git a/res/values-en-rGB/strings.xml b/res/values-en-rGB/strings.xml
index 069e0be..a4725d9 100644
--- a/res/values-en-rGB/strings.xml
+++ b/res/values-en-rGB/strings.xml
@@ -56,7 +56,7 @@
     <string name="account_setup_options_mail_window_auto" msgid="4188895354366183790">"Automatic"</string>
     <string name="account_setup_options_mail_window_1day" msgid="3965715241135811407">"One day"</string>
     <string name="account_setup_options_mail_window_3days" msgid="736181102295878114">"Three days"</string>
-    <string name="account_setup_options_mail_window_1week" msgid="5639718031108023741">"one week"</string>
+    <string name="account_setup_options_mail_window_1week" msgid="5639718031108023741">"One week"</string>
     <string name="account_setup_options_mail_window_2weeks" msgid="4567049268124213035">"Two weeks"</string>
     <string name="account_setup_options_mail_window_1month" msgid="5846359669750047081">"One month"</string>
     <string name="account_setup_options_mail_window_all" msgid="5372861827683632364">"All"</string>
diff --git a/res/values-fa/strings.xml b/res/values-fa/strings.xml
index 13559bb..9edb1bc 100644
--- a/res/values-fa/strings.xml
+++ b/res/values-fa/strings.xml
@@ -21,16 +21,16 @@
     <string name="meeting_declined" msgid="6707617183246608552">"پذیرفته نشد: <xliff:g id="SUBJECT">%s</xliff:g>"</string>
     <string name="meeting_tentative" msgid="8250995722130443785">"احتمالی: <xliff:g id="SUBJECT">%s</xliff:g>"</string>
     <string name="meeting_canceled" msgid="3949893881872084244">"لغو شد: <xliff:g id="SUBJECT">%s</xliff:g>"</string>
-    <string name="meeting_updated" msgid="8529675857361702860">"به روزرسانی شد: <xliff:g id="SUBJECT">%s</xliff:g>"</string>
+    <string name="meeting_updated" msgid="8529675857361702860">"به‌روزرسانی شد: <xliff:g id="SUBJECT">%s</xliff:g>"</string>
     <string name="meeting_when" msgid="2765696159697448656">"زمان: <xliff:g id="WHEN">%s</xliff:g>"</string>
     <string name="meeting_where" msgid="5992367535856553079">"مکان: <xliff:g id="WHERE">%s</xliff:g>"</string>
     <string name="meeting_recurring" msgid="3134262212606714023">"زمان: <xliff:g id="EVENTDATE">%s</xliff:g> (تکرار)"</string>
     <string name="meeting_allday" msgid="6696389765484663513">"زمان: <xliff:g id="EVENTDATE">%s</xliff:g> (در تمام طول روز)"</string>
-    <string name="meeting_allday_recurring" msgid="2320264182781062684">"زمان: <xliff:g id="EVENTDATE">%s</xliff:g> (در تمام طول روز، بصورت تکراری)"</string>
+    <string name="meeting_allday_recurring" msgid="2320264182781062684">"زمان: <xliff:g id="EVENTDATE">%s</xliff:g> (در تمام طول روز، به‌صورت تکراری)"</string>
     <string name="notification_exchange_calendar_added" msgid="6823659622379350159">"تقویم Exchange اضافه شد"</string>
-    <string name="app_name" msgid="5316597712787122829">"سرویس های Exchange"</string>
+    <string name="app_name" msgid="5316597712787122829">"سرویس‌های Exchange"</string>
     <string name="exception_cancel" msgid="6160117429428313805">"این رویداد لغو شده است به مدت: <xliff:g id="DATE">%s</xliff:g>"</string>
-    <string name="exception_updated" msgid="3397583105901142050">"جزئیات این رویداد تغییر کرده اند به مدت: <xliff:g id="DATE">%s</xliff:g>"</string>
+    <string name="exception_updated" msgid="3397583105901142050">"جزئیات این رویداد تغییر کرده‌اند به مدت: <xliff:g id="DATE">%s</xliff:g>"</string>
     <string name="policy_dont_allow_storage_cards" msgid="2765447013574188473">"کارت‌های حافظه مجاز نیست"</string>
     <string name="policy_dont_allow_unsigned_apps" msgid="4896164334956001479">"برنامه‌های امضا نشده مجاز نیستند"</string>
     <string name="policy_dont_allow_unsigned_installers" msgid="1326544905185523540">"نصب کننده‌های برنامه امضا نشده مجاز نیستند"</string>
@@ -42,7 +42,7 @@
     <string name="policy_dont_allow_browser" msgid="1018764395507493616">"مرورگرها مجاز نیستند"</string>
     <string name="policy_dont_allow_consumer_email" msgid="6958427300686692292">"ایمیل مصرف‌کننده مجاز نیست"</string>
     <string name="policy_dont_allow_internet_sharing" msgid="2370083814654927695">"اشتراک‌گذاری اینترنتی مجاز نیست"</string>
-    <string name="policy_require_smime" msgid="673557150920820590">"پیامهای SMIME لازم است"</string>
+    <string name="policy_require_smime" msgid="673557150920820590">"پیام‌های SMIME لازم است"</string>
     <string name="policy_bluetooth_restricted" msgid="5248824127186039567">"استفاده از بلوتوث محدود است"</string>
     <string name="policy_app_blacklist" msgid="8169194058285873461">"برنامه‌های خاص مجاز نیستند"</string>
     <string name="policy_app_whitelist" msgid="3670572644342165306">"فقط برنامه‌های خاص مجاز هستند"</string>
diff --git a/tests/src/com/android/exchange/utility/CalendarUtilitiesTests.java b/tests/src/com/android/exchange/utility/CalendarUtilitiesTests.java
index 0ecdb8f..77820a5 100644
--- a/tests/src/com/android/exchange/utility/CalendarUtilitiesTests.java
+++ b/tests/src/com/android/exchange/utility/CalendarUtilitiesTests.java
@@ -110,6 +110,13 @@ public class CalendarUtilitiesTests extends SyncAdapterTestCase<CalendarSyncAdap
         "AAAAAAAAAAsAAAABAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
         "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAACAAAAAAAAAAAAxP///w==";
 
+    // This string specifies "Europe/London" in the name, but otherwise is somewhat bogus
+    // in that it has unknown time zone dates with a 0 bias (GMT). (From a Zimbra server user)
+    private static final String EUROPE_LONDON_TIME_BY_NAME =
+        "AAAAAEV1cm9wZS9Mb25kb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
+        "AAAAAAAAAAoAAQAFAAIAAAAAAAAAAAAAAEV1cm9wZS9Mb25kb24AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
+        "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAQAFAAEAAAAAAAAAxP///w==";
+
     private static final String ORGANIZER = "organizer@server.com";
     private static final String ATTENDEE = "attendee@server.com";
 
@@ -140,6 +147,9 @@ public class CalendarUtilitiesTests extends SyncAdapterTestCase<CalendarSyncAdap
         tz = CalendarUtilities.tziStringToTimeZone(AUSTRALIA_ACT_TIME);
         assertEquals("Australia/ACT", tz.getID());
 
+        tz = CalendarUtilities.tziStringToTimeZone(EUROPE_LONDON_TIME_BY_NAME);
+        assertEquals("Europe/London", tz.getID());
+
         // Test peculiar MS sent EST data with and without lenient precision; send standard
         // precision + 1 (i.e. 1ms) to make sure the code doesn't automatically flip to lenient
         // when the tz isn't found
